from decimal import Decimal

# Generated by qodo Gen

import pytest
from django.core.exceptions import ValidationError

from TicketSales.models import Concert, ConcertStatus


class TestConcert:

    # Creating a Concert instance with valid data should succeed
    def test_create_concert_with_valid_data(self):
        concert = Concert(
            name="Live Concert",
            singer_name="John Doe",
            length=120,
            date="2023-12-31 20:00:00",
            location="Tehran Arena",
            available_tickets=100,
            ticket_price=Decimal("50.00"),
            description="A great concert event",
            ticket_status=ConcertStatus.AVAILABLE
        )
        concert.full_clean()  # This will raise a ValidationError if the data is invalid
        concert.save()
        assert concert.id is not None

    # Creating a Concert with a negative length should raise a validation error
    def test_create_concert_with_negative_length(self):
        with pytest.raises(ValidationError):
            concert = Concert(
                name="Live Concert",
                singer_name="John Doe",
                length=-10,
                date="2023-12-31 20:00:00",
                location="Tehran Arena",
                available_tickets=100,
                ticket_price=Decimal("50.00"),
                description="A great concert event",
                ticket_status=ConcertStatus.AVAILABLE
            )
            concert.full_clean()  # This will raise a ValidationError if the data is invalid